diff --git a/ARCHITECTURE.md b/ARCHITECTURE.md
index 4175290..5e9add4 100644
--- a/ARCHITECTURE.md
+++ b/ARCHITECTURE.md
@@ -114,10 +114,10 @@ Here's the proposed layout for the initial static UI:
 
 Implementation Notes:
 
-a) CPU Usage Section:
-   - Implement a custom Bubble Tea component for the CPU Core Heatmap.
-   - Use a grid of colored blocks, where each block represents a core and its color intensity represents usage.
-   - Implement a sorting mechanism to identify and display the top 5 busiest cores.
+a) CPU Usage Section: ✓
+   - Implement a custom Bubble Tea component for the CPU Core Heatmap. ✓
+   - Use a grid of colored blocks, where each block represents a core and its color intensity represents usage. ✓
+   - Implement a sorting mechanism to identify and display the top 5 busiest cores. ✓
 
 b) Memory Usage Section:
    - Use Bubble Tea's built-in components or create custom ones for the memory usage bar graphs.
@@ -133,6 +133,9 @@ d) Process Monitor Section:
 e) Overall Layout:
    - Use Bubble Tea's layout components (or create custom ones) to divide the screen into four main sections.
    - Ensure that each section can be updated independently for better performance.
+   - Implement responsive design to fill the entire screen horizontally and support resizing.
+   - Center the CPU heatmap without changing its size.
+   - Allow CPU usage and busiest cores components to adapt their horizontal data display based on available space.
 
 2) Develop a basic Bubble Tea prototype displaying sample data.
    - Start by implementing the overall layout structure.
diff --git a/cmd/mim/main.go b/cmd/mim/main.go
index 4edff9d..a1de8f3 100644
--- a/cmd/mim/main.go
+++ b/cmd/mim/main.go
@@ -1,27 +1,42 @@
 package main
 
 import (
-    "fmt"
-    "os"
+	"fmt"
+	"log"
+	"os"
 
-    tea "github.com/charmbracelet/bubbletea"
-    "github.com/jonsampson/mim/internal/infra"
-    "github.com/jonsampson/mim/internal/tui"
+	tea "github.com/charmbracelet/bubbletea"
+	"github.com/jonsampson/mim/internal/infra"
+	"github.com/jonsampson/mim/internal/tui"
 )
 
 func main() {
-    factory := infra.CollectorFactory{}
-    collectors := factory.CreateCollectors()
+	// Open a log file for debugging
+	logFile, err := os.OpenFile("debug.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
+	if err != nil {
+		fmt.Printf("Error opening log file: %v\n", err)
+		os.Exit(1)
+	}
+	defer logFile.Close()
 
-    model, err := tui.InitialModel(collectors...)
-    if err != nil {
-        fmt.Printf("Error initializing model: %v\n", err)
-        os.Exit(1)
-    }
+	// Set up the log package to write to the log file
+	log.SetOutput(logFile)
 
-    p := tea.NewProgram(model)
-    if _, err := p.Run(); err != nil {
-        fmt.Printf("Alas, there's been an error: %v", err)
-        os.Exit(1)
-    }
+	factory := infra.CollectorFactory{}
+	collectors := factory.CreateCollectors()
+
+	model, err := tui.InitialModel(collectors...)
+	if err != nil {
+		log.Printf("Error initializing model: %v\n", err)
+		fmt.Printf("Error initializing model: %v\n", err)
+		os.Exit(1)
+	}
+
+	// Initialize the Bubble Tea program (output remains on the terminal)
+	p := tea.NewProgram(model)
+	if _, err := p.Run(); err != nil {
+		log.Printf("Alas, there's been an error: %v", err)
+		fmt.Printf("Alas, there's been an error: %v", err)
+		os.Exit(1)
+	}
 }
diff --git a/internal/tui/cpu_heatmap.go b/internal/tui/cpu_heatmap.go
index 04fd0b7..53fd9dd 100644
--- a/internal/tui/cpu_heatmap.go
+++ b/internal/tui/cpu_heatmap.go
@@ -10,35 +10,62 @@ import (
 type CPUHeatmap struct {
 	hm              *heatmap.Model
 	squareDimension int
+	xOffset         int
+	yOffset         int
 }
 
-func NewCPUHeatmap(cores int) *CPUHeatmap {
-	squareDimension := int(math.Ceil(math.Sqrt(float64(cores))))
-	hm := heatmap.New(squareDimension + 1,
-		squareDimension + 1,
-		heatmap.WithValueRange(0, 100),
-	)
-	return &CPUHeatmap{hm: &hm, squareDimension: squareDimension}
+func NewCPUHeatmap() *CPUHeatmap {
+	return &CPUHeatmap{}
 }
 
 func (c *CPUHeatmap) Update(metrics domain.CPUMemoryMetrics) {
-	c.hm.Clear()
+	c.squareDimension = int(math.Ceil(math.Sqrt(float64(len(metrics.CPUUsagePerCore)))))
+	heatMap := heatmap.New(c.squareDimension+1,
+		c.squareDimension+1,
+		heatmap.WithValueRange(0, 100),
+	)
 	matrix := make([][]float64, c.squareDimension)
 	core := 0
 	for i := range matrix {
-        matrix[i] = make([]float64, c.squareDimension)
+		matrix[i] = make([]float64, c.squareDimension)
 		for j := range matrix[i] {
 			if core >= len(metrics.CPUUsagePerCore) {
-                break
-            }
-            matrix[i][j] = metrics.CPUUsagePerCore[core]
+				break
+			}
+			matrix[i][j] = metrics.CPUUsagePerCore[core]
 			core++
-        }
-    }
-	c.hm.PushAllMatrixRow(matrix)
-	c.hm.Draw()
+		}
+	}
+	heatMap.PushAllMatrixRow(matrix)
+	heatMap.Draw()
+	c.hm = &heatMap
+}
+
+func (c *CPUHeatmap) Resize(width, height int) {
+	// Calculate the position to center the heatmap
+	c.xOffset = (width - c.squareDimension) / 2
+	c.yOffset = 0
 }
 
 func (c *CPUHeatmap) View() string {
+	if c.hm == nil {
+		return ""
+	}
+	// log.Printf("CPUHeatmap View: %v", c.hm)
 	return c.hm.View()
+	// view := c.hm.View()
+	// lines := strings.Split(view, "\n")
+
+	// // Add vertical padding
+	// for range c.yOffset {
+	// 	lines = append([]string{""}, lines...)
+	// }
+
+	// // Add horizontal padding
+	// paddedLines := make([]string, len(lines))
+	// for i, line := range lines {
+	// 	paddedLines[i] = strings.Repeat(" ", c.xOffset) + line
+	// }
+
+	// return strings.Join(paddedLines, "\n")
 }
diff --git a/internal/tui/cpu_usage_sparkline.go b/internal/tui/cpu_usage_sparkline.go
index 479f185..3ddd899 100644
--- a/internal/tui/cpu_usage_sparkline.go
+++ b/internal/tui/cpu_usage_sparkline.go
@@ -9,41 +9,44 @@ import (
 )
 
 type CPUUsageSparkline struct {
-    sl         *sparkline.Model
-    width      int
-    height     int
-    lastValue  float64
+    sl        *sparkline.Model
+    width     int
+    height    int
+    lastValue float64
 }
 
-func NewCPUUsageSparkline(width, height int) *CPUUsageSparkline {
+func NewCPUUsageSparkline() *CPUUsageSparkline {
+    sparkline := sparkline.New(
+        20,
+        1,
+        sparkline.WithMaxValue(100),
+    )
     return &CPUUsageSparkline{
-        width:     width,
-        height:    height,
+        width:     50, // Set a default width
+        height:    3,
         lastValue: 0,
-    }
-}
-
-func (c *CPUUsageSparkline) initializeIfNeeded() {
-    if c.sl == nil {
-        sparkline := sparkline.New(
-			c.width, 
-			c.height,
-			sparkline.WithMaxValue(100),
-		)
-        c.sl = &sparkline
+        sl:        &sparkline,
     }
 }
 
 func (c *CPUUsageSparkline) Update(metrics domain.CPUMemoryMetrics) {
-    c.initializeIfNeeded()
     c.lastValue = metrics.CPUUsageTotal
-    c.sl.Push(c.lastValue)
-    c.sl.Draw()
+    if c.sl != nil {
+        c.sl.Push(c.lastValue)
+        c.sl.Draw()
+    }
 }
 
 func (c *CPUUsageSparkline) View() string {
-    c.initializeIfNeeded()
     sparklineView := c.sl.View()
-    currentUsage := fmt.Sprintf("CPU Usage: %.1f%%", c.lastValue)
+    currentUsage := fmt.Sprintf("Current CPU Usage: %.1f%%", c.lastValue)
     return lipgloss.JoinVertical(lipgloss.Left, sparklineView, currentUsage)
 }
+
+func (c *CPUUsageSparkline) Resize(width, height int) {
+    c.width = width
+    c.height = height
+    if c.sl != nil {
+        c.sl.Resize(width, height)
+    }
+}
diff --git a/internal/tui/model.go b/internal/tui/model.go
index 358a055..c9f665f 100644
--- a/internal/tui/model.go
+++ b/internal/tui/model.go
@@ -2,7 +2,9 @@ package tui
 
 import (
 	"fmt"
+	"log"
 
+	"github.com/charmbracelet/bubbles/help"
 	tea "github.com/charmbracelet/bubbletea"
 	"github.com/charmbracelet/lipgloss"
 	"github.com/jonsampson/mim/internal/domain"
@@ -17,7 +19,8 @@ type metricsCollector[T any] interface {
 
 type Model struct {
 	cpuHeatmap         *CPUHeatmap
-    cpuUsageSparkline  *CPUUsageSparkline
+	cpuUsageSparkline  *CPUUsageSparkline
+	busiestCores       *BusiestCores
 	cpuMemoryMetrics   domain.CPUMemoryMetrics
 	cpuMemoryCollector metricsCollector[domain.CPUMemoryMetrics]
 	gpuCollector       metricsCollector[domain.GPUMetrics]
@@ -26,15 +29,22 @@ type Model struct {
 	memoryUsage        float64
 	gpuUsage           float64
 	gpuMemoryUsage     float64
+	width              int
+	height             int
+	help               help.Model
 }
 
 func InitialModel(collectors ...interface{}) (Model, error) {
+
 	model := Model{
 		cpuUsagePerCore: []float64{},
 		cpuUsageTotal:   0,
 		memoryUsage:     0,
 		gpuUsage:        0,
 		gpuMemoryUsage:  0,
+		cpuUsageSparkline: NewCPUUsageSparkline(),
+		cpuHeatmap: NewCPUHeatmap(),
+		busiestCores: NewBusiestCores(),
 	}
 
 	collectorInitialized := false
@@ -88,23 +98,23 @@ func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
 			return m, tea.Quit
 		}
 
+	case tea.WindowSizeMsg:
+		m.width = msg.Width
+		m.height = msg.Height
+		m.cpuHeatmap.Resize(m.width/2, 6)
+		m.busiestCores.Resize(m.width/2, 6)
+		m.cpuUsageSparkline.Resize(m.width/2, 3)
+		log.Printf("Window size changed: %d x %d", msg.Width, msg.Height)
 	case domain.CPUMemoryMetrics:
 		m.cpuMemoryMetrics = msg
 		m.cpuUsagePerCore = msg.CPUUsagePerCore
 		m.cpuUsageTotal = msg.CPUUsageTotal
 		m.memoryUsage = msg.MemoryUsage
 
-		// Initialize or update the CPU heatmap
-		if m.cpuHeatmap == nil {
-			m.cpuHeatmap = NewCPUHeatmap(len(m.cpuUsagePerCore))
-		}
+		m.cpuUsageSparkline.Update(msg)
 		m.cpuHeatmap.Update(msg)
+		m.busiestCores.Update(msg)
 
-        // Initialize or update the CPU usage sparkline
-        if m.cpuUsageSparkline == nil {
-            m.cpuUsageSparkline = NewCPUUsageSparkline(20, 3)
-        }
-        m.cpuUsageSparkline.Update(msg)
 		cmd = listenForMetrics(m.cpuMemoryCollector.Metrics())
 
 	case domain.GPUMetrics:
@@ -117,25 +127,48 @@ func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
 }
 
 func (m Model) View() string {
-	// Combine views of all components
-	cpuHeatmapView := "CPU Heatmap initializing..."
-	if m.cpuHeatmap != nil {
-		cpuHeatmapView = m.cpuHeatmap.View()
-	}
-    cpuUsageSparklineView := "CPU Usage Sparkline initializing..."
-    if m.cpuUsageSparkline != nil {
-        cpuUsageSparklineView = m.cpuUsageSparkline.View()
-    }
-	return lipgloss.JoinVertical(
+	// Define styles for layout
+	containerStyle := lipgloss.NewStyle().
+		Width(m.width).
+		Height(m.height).
+		Padding(1)
+
+	leftColumnStyle := lipgloss.NewStyle().
+		Width(m.width / 2).
+		Height(m.height - 2)
+
+	rightColumnStyle := leftColumnStyle
+
+	// Render components
+	cpuUsageView := m.cpuUsageSparkline.View()
+	cpuHeatmapView := m.cpuHeatmap.View()
+	busiestCoresView := m.busiestCores.View()
+
+	// Combine components
+	leftColumn := lipgloss.JoinVertical(
+		lipgloss.Left,
+		cpuUsageView,
+		lipgloss.PlaceHorizontal(m.width/2, lipgloss.Center, cpuHeatmapView),
+		busiestCoresView,
+	)
+
+	rightColumn := lipgloss.JoinVertical(
 		lipgloss.Left,
-        cpuUsageSparklineView,
-        fmt.Sprintf("CPU Heatmap (%d cores)", len(m.cpuUsagePerCore)),
-		cpuHeatmapView,
 		fmt.Sprintf("Memory Usage: %.2f%%", m.memoryUsage),
 		fmt.Sprintf("GPU Usage: %.2f%%", m.gpuUsage),
 		fmt.Sprintf("GPU Memory Usage: %.2f%%", m.gpuMemoryUsage),
 		"\nPress q to quit",
 	)
+
+	// Combine columns
+	content := lipgloss.JoinHorizontal(
+		lipgloss.Top,
+		leftColumnStyle.Render(leftColumn),
+		rightColumnStyle.Render(rightColumn),
+	)
+
+	// Render final view
+	return containerStyle.Render(content)
 }
 
 func listenForMetrics[T any](metrics <-chan T) tea.Cmd {
